var searchDocuments = {"references/eClassifiers/CompositeRelationshipTarget/inheritance.html":{"path":"Composite Relationship Target/Inheritance","action-uuid":"1f0b2bce-be0d-4179-ad1b-bc3d3cd5d1e0","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/ArchitectureDescriptionElement/inheritance.html":{"path":"Architecture Description Element/Inheritance","action-uuid":"e7112f5f-6f28-4ead-bf35-739bd19d2b0c","title":"Inheritance","content":"Supertypes Subtypes  "},"demo/c4/sketchy/references/elements/9Xhv3QX139gfRowG86oh-1/references/elements/Q9qKH9tl9N2e6UXnhQ6L-3/index.html":{"path":"System/Container","action-uuid":"ad4b747e-8012-4d54-a7dc-9654bc117efd","title":"Container","content":"TODO Representation not found: drawio"},"references/eClassifiers/ArchitectureElement/references/eStructuralFeatures/icon/index.html":{"path":"Architecture Element/Attributes/icon","action-uuid":"ad175784-470c-4e59-822b-f2e95ecfbb94","title":"icon","content":"Architecture element icon. Treated as URL if contains / or as a CSS class otherwise. E.g. fas fa-wrench would be treated as a CSS class. If this attribute is blank then the type icon is used. For example, a generic server icon defined at the Server type can be overridden by an icon defined at a server instance (e.g. Web Server)."},"references/eClassifiers/Role/references/eStructuralFeatures/extensions/index.html":{"path":"Role/References/extensions","action-uuid":"ff4fd068-c277-470a-bfd5-1dd620b3affd","title":"extensions","content":"Roles extending this role"},"demo/c4/sketchy/references/elements/user/references/outgoingConnections/https/index.html":{"path":"Person/HTTPS","action-uuid":"b0045635-184f-4063-b0ae-819e35eb4bae","title":"HTTPS","content":"TODO"},"references/eSubpackages/c4/references/eClassifiers/System/index.html":{"path":"C4/System","action-uuid":"7a7f2d8a-6f13-4637-8430-3e6e4390f912","title":"System","content":"A software system is the highest level of abstraction and describes something that delivers value to its users, whether they are human or not. This includes the software system you are modelling, and the other software systems upon which your software system depends (or vice versa). Unfortunately the term &ldquo;software system&rdquo; is the hardest of the C4 model abstractions to define, and this isn&rsquo;t helped by the fact that each organisation will also have their own terminology for describing the same thing, typically using terms such as &ldquo;application&rdquo;, &ldquo;product&rdquo;, &ldquo;service&rdquo;, etc. One way to think about it is that a software system is something a single software development team is building, owns, has responsibility for, and can see the internal implementation details of. Perhaps the code for that software system resides in a single source code repository, and anybody on the team is entitled to modify it. In many cases, the boundary of a software system will correspond to the boundary of a single team. It may also be the case that everything inside the boundary of a software system is deployed at the same time.1 Copied verbatim from The C4 model for visualizing software architecture under the terms of Creative Commons Attribution 4.0 International License. â†©"},"demo/c4/cerulean/references/elements/Q9qKH9tl9N2e6UXnhQ6L-2/index.html":{"action-uuid":"4dd1c70c-d651-431f-8911-34c10d6a0b52","title":"Person","content":"TODO TODO"},"references/eClassifiers/Role/references/eStructuralFeatures/extends/index.html":{"path":"Role/References/extends","action-uuid":"45423a1f-a0a9-4262-9d6e-68a7bb44786b","title":"extends","content":"A role can be a specialization (extension) of one or more roles"},"demo/internet-banking-system-c4/cerulean/references/elements/internet-banking-system/index.html":{"action-uuid":"5d17813d-41ed-4107-b4a4-56ad0ede93e8","title":"Internet Banking System","content":"The the above diagram is a Container diagram, which is &ldquo;zoom-in to the system boundary&rdquo;. Mapping Surroundings -&gt; selectors &ldquo;Personal Banking Customer&rdquo;, &ldquo;E-mail System&rdquo;, and &ldquo;Mainframe Banking System&rdquo; diagram elements are mapped to the same semantic elements as on the System Context Diagram using selectors. The system context diagram defines the surrounding nodes and this diagram references them. This is a selector of the &ldquo;E-mail System&rdquo;: getDocument().getModelElementByProperty('semantic-id', 'microsoft-exchange')\n The loading logic &ldquo;carries over&rdquo; tooltips from the System Context Diagram to this diagram. Internet Banking System The &ldquo;Internet Banking System&rdquo; container maps to the same semantic element as on the System Context diagram because: The &ldquo;Internet Banking System&rdquo; element on the System Context Diagram links to this diagram page. The &ldquo;Internet Banking System&rdquo; element on this diagram has page-element property set to true. Semantic elements of the child elements of the &ldquo;Internet Banking System&rdquo; element are mapped to the elements reference and ordered with the flow comparator: container:\n  self: \n    elements:\n      path: 1\n      comparator: \n        flow: \n          fallback: label\n          condition: id != 'send-email'\n The condition prevents traversal of the &ldquo;API Application&rdquo; -&gt; &ldquo;E-mail System&rdquo; connection. It is not really necessary here - the order would not change without it. It is provided as an example because connection conditions may be necessary in some cases for proper ordering in diagrams with connection cycles. Container elements All diagram elements within the system container are mapped to c4.Containers. The API Application is linked to the &ldquo;Container Diagram&rdquo; page. As such, its semantic element is mapped to the &ldquo;API Application Component Diagram&rdquo; page element as well allowing further mapping on that page. The API Application diagram element defines base-uri property as %id%/. Because &ldquo;Placeholders&rdquo; is checked, %id%/ expands to api-application/ during loading. doc-ref is set to readme.md, which in combination with base-uri resolves to api-appliction/readme.md. Personal Banking Customer A customer of the bank, with personal bank accounts. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Database Stores user registration information, hashed authentication credentials, access logs, etc. Delivers to the customer's web browser Web Application Delivers the static content and the Internet banking single page application. Makes API calls to [JSON/HTTPS] Single-Page Application Provides all of the Internet banking functionality to customers via their web browser. Makes API calls to [JSON/HTTPS] Mobile App Provides a limited subset of the Internet banking functionality to customers via their mobile device. Reads from and writes to [SQL/TCP] API Application Provides Internet banking functionality via a JSP/HTTPS API. Internet Banking System Allows customers to view information about their bank accounts, and make payments. Sends e-mails to Sends e-mail using Makes API calls to [XML/HTTPS] Visits bigbank.com/ib using [HTTPS] Views account balances, and makes payments using Views account balances, and makes payments using Personal Banking Customer A customer of the bank, with personal bank accounts. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Database Stores user registration information, hashed authentication credentials, access logs, etc. Delivers to the customer's web browser Web Application Delivers the static content and the Internet banking single page application. Makes API calls to [JSON/HTTPS] Single-Page Application Provides all of the Internet banking functionality to customers via their web browser. Makes API calls to [JSON/HTTPS] Mobile App Provides a limited subset of the Internet banking functionality to customers via their mobile device. Reads from and writes to [SQL/TCP] API Application Provides Internet banking functionality via a JSP/HTTPS API. Internet Banking System Allows customers to view information about their bank accounts, and make payments. Sends e-mails to Sends e-mail using Makes API calls to [XML/HTTPS] Visits bigbank.com/ib using [HTTPS] Views account balances, and makes payments using Views account balances, and makes payments using"},"references/eClassifiers/ArchitectureElement/inheritance.html":{"path":"Architecture Element/Inheritance","action-uuid":"6909de7d-1713-4f96-95d8-59775e8ebdb3","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eClassifiers/ArchitectureDescription/index.html":{"action-uuid":"75cebb0b-fab5-4d63-8d0b-46db4964c98b","title":"Architecture Description","content":"Architecture description contains architecture elements and reference elements such as stakeholders. Architecture description elements are keyed by string identifiers which allows to implement architecture inheritance similar to inheritance in object-oriented languages such as Java or layering in Docker images - a new architecture may be derived from an existing architecture by applying a layer of deltas. This is also similar to a commit tree in Git."},"demo/c4/cerulean/references/elements/Q9qKH9tl9N2e6UXnhQ6L-2/references/outgoingConnections/https/index.html":{"path":"Person/HTTPS","action-uuid":"591a2dd8-5b68-4c7d-98d4-e80283f6c5c3","title":"HTTPS","content":"TODO"},"demo/internet-banking-system-c4/sketchy/references/elements/internet-banking-system/references/outgoingConnections/send-email-using/index.html":{"path":"Internet Banking System/Sends e-mail using","action-uuid":"04049793-5759-4eb6-82e9-3df63896e137","title":"Sends e-mail using","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."},"demo/aws/search.html":{"action-uuid":"2068d0d7-1201-4b79-9528-072c9f89ce23","title":"Search","content":"Clear"},"references/eClassifiers/RelationshipSource/index.html":{"action-uuid":"2e8fc8db-0918-4c29-8e85-36e44e3f2268","title":"Relationship Source","content":"Source of relationships uniquely identified by string ids. It provides support for architecture inheritance/layering - replacing (overriding), adding, or removing relationships"},"references/eClassifiers/Relationship/inheritance.html":{"path":"Relationship/Inheritance","action-uuid":"a2cc0fb9-2eac-459a-a7af-6fb393f40740","title":"Inheritance","content":"Supertypes Subtypes  "},"demo/aws/references/elements/UEzPUAAOIrF-is8g5C7q-175/index.html":{"action-uuid":"16c8c2dd-11d1-4c3f-9bbf-952171c799e6","title":"AWS Cloud","content":"In-line Markdown documentation Alice -&gt; Bob One Two Three H1 H2 C1 C2"},"references/eClassifiers/ArchitectureDescription/references/eStructuralFeatures/actors/index.html":{"path":"Architecture Description/References/actors","action-uuid":"7a1fe0ba-467f-442e-b6c9-da89f10258c4","title":"actors","content":"Actors operating on the elements of this description Actors operating on the elements of this architecture description"},"references/eClassifiers/Role/references/eStructuralFeatures/actors/index.html":{"path":"Role/References/actors","action-uuid":"8cbbfb46-22ab-422c-9d8f-392ff30f95b8","title":"actors","content":"Actors in this role"},"references/eClassifiers/PersonActor/inheritance.html":{"path":"Person Actor/Inheritance","action-uuid":"a046e7ed-f9f3-4ec9-a759-1831a8d7d89b","title":"Inheritance","content":"Supertypes "},"demo/c4/sketchy/references/elements/9Xhv3QX139gfRowG86oh-1/index.html":{"action-uuid":"29225d13-ae6c-493f-ae63-1340d34d557a","title":"System","content":"TODO Container System Person HTTPS Container System Person HTTPS"},"demo/c4/cerulean/index.html":{"action-uuid":"7c6a30ef-415c-4414-99cb-a85556e68c16","title":"C4 Template","content":"This is a basic demo of mapping of a Drawio diagrams to the C4 model classes as explained in the Beyond Diagrams book. The diagram was created from https://architecture.models.nasdanika.org/resources/c4-template.drawio template and with https://architecture.models.nasdanika.org/resources/C4.xml library. System Person Relationship System Person Relationship"},"demo/internet-banking-system-c4/cerulean/search.html":{"action-uuid":"de2600a7-3e00-47e6-baad-64c43652a969","title":"Search","content":"Clear"},"references/eClassifiers/Role/index.html":{"action-uuid":"6de72763-d973-40e0-8ce1-0f151d276c8f","title":"Role","content":"A role is played by an Actor performing activities on the containing Undergoer."},"demo/c4/cerulean/references/elements/Q9qKH9tl9N2e6UXnhQ6L-2/references/outgoingConnections/9Xhv3QX139gfRowG86oh-3/index.html":{"path":"Person/Relationship","action-uuid":"eeb7ec3d-336e-44bb-bf06-9d001da9ba60","title":"Relationship","content":"TODO"},"demo/internet-banking-system-c4/sketchy/references/elements/internet-banking-system/references/elements/api-application/references/elements/mainframe-banking-system-facade/index.html":{"path":"Internet Banking System/API Application/com.bigankplc.internetbanking.component.mainframe","action-uuid":"b9149a45-2efb-4bb4-95aa-dd8ddf25c125","title":"com.bigankplc.internetbanking.component.mainframe","content":"The the above diagram is a Code diagram, which is used to show how a component is implemented as code. Diagram elements were taken from the Drawio UML shapes palette. Icons were added by manually adding image=https://cdn.jsdelivr.net/gh/Nasdanika-Models/ecore@master/graph/web-resources/icons/EClass.gif; to the style. Mapping The package container maps to the same semantic element as on the API Application Component diagram because: The &ldquo;Mainframe Banking System Facade&rdquo; element on the API Application Component diagram links to this diagram page. The package element on this diagram has page-element property set to true. Semantic elements of the child elements of the &ldquo;API Application&rdquo; element are mapped to the elements reference with ordering by label comparator: container:\n  self:\n    elements:\n      path: 1\n      comparator: label\n All code elements within the package are mapped to c4.Code. Representation element filtering Fill color of MainframeBankingSystemFacadeImpl is set during the generation with the following code: @Override\nprotected void filterRepresentationElement(\n\t\tElement representationElement, \n\t\tEObject semanticElement,\n\t\tMap&lt;EObject, EObject&gt; registry, \n\t\tProgressMonitor progressMonitor) {\n\n\tsuper.filterRepresentationElement(representationElement, semanticElement, registry, progressMonitor);\n\t\n\tif (representationElement instanceof Node) {\n\t\tNode node = (Node) representationElement;\n\t\tif (&quot;MainframeBankingSystemFacadeImpl&quot;.equals(node.getId())) {\n\t\t\tnode.getStyle().put(&quot;fillColor&quot;, &quot;#ffe6cc&quot;);\n\t\t\tnode.getStyle().put(&quot;strokeColor&quot;, &quot;#d79b00&quot;);\n\t\t}\n\t}\t\t\t\t\t\n}\n Representation filtering may be used to inject information which is not available during diagram creation or dynamic, but is available during generation. In this example the background color may represent code component &ldquo;health&rdquo; - code coverage, number and severity of SonarQube findings, etc. At higher level diagrams it may represent, say: During construction: development progress - pending, in progress, blocked, behind schedule, &hellip; After deployment: container runtime status - errors, CPU load, memory consumption, &hellip; +throws MainframeBankingSystemFacadeImpl AbstractResponse AbstractRequest GetBalanceRequest GetBalanceResponse BankingSystemConnection MainframeBankingSystemFacade MainframeBankingSystemException +sends +receives +parses +uses +creates com.bigankplc.internetbanking.component.mainframe A facade onto the mainframe banking system. InternetBankingSystemException +throws MainframeBankingSystemFacadeImpl AbstractResponse AbstractRequest GetBalanceRequest GetBalanceResponse BankingSystemConnection MainframeBankingSystemFacade MainframeBankingSystemException +sends +receives +parses +uses +creates com.bigankplc.internetbanking.component.mainframe A facade onto the mainframe banking system. InternetBankingSystemException"},"references/eSubpackages/c4/references/eClassifiers/Relationship/index.html":{"path":"C4/Relationship","action-uuid":"a0721bc5-ff44-4177-b1ff-b560177e3686","title":"Relationship","content":"The way in which two architecture elements are connected."},"demo/internet-banking-system-c4/cerulean/references/elements/internet-banking-system/references/elements/api-application/index.html":{"path":"Internet Banking System/API Application","action-uuid":"e3674661-d0a4-4d22-b96a-1ecc4c6519df","title":"API Application","content":"The the above diagram is a Component diagram, which is used to &ldquo;decompose each container further to identify the major structural building blocks and their interactions&rdquo;. Mapping Surroundings -&gt; selectors Similar to the container diagram, diagram elements representing the surroundings of the &ldquo;API Application&rdquo; are mapped to semantic elements defined on the higher level diagrams using selectors. The system context diagram defines the surrounding nodes and this diagram references them. This is a selector of the &ldquo;Single-Page Application&rdquo;: getDocument().getModelElementById('single-page-application')\n The loading logic &ldquo;carries over&rdquo; tooltips from the System Context Diagram to this diagram. API Application The &ldquo;API Application&rdquo; container maps to the same semantic element as on the Container diagram because: The &ldquo;API Application&rdquo; element on the Container diagram links to this diagram page. The &ldquo;API Application&rdquo; element on this diagram has page-element property set to true. Semantic elements of the child elements of the &ldquo;API Application&rdquo; element are mapped to the elements reference and ordered with the right-down comparator: container:\n  self:\n    elements:\n      path: 1\n      comparator: right-down\n Components All components within the container are mapped to c4.Components. The &ldquo;Mainframe Banking System Facade&rdquo; is linked to the &ldquo;Mainframe Banking System Facade Code&rdquo; page. As such, its semantic element is mapped to the &ldquo;Mainframe Banking System Facade Code&rdquo; page element as well allowing further mapping on that page. This diagram element defines base-uri property as %id%/. Because &ldquo;Placeholders&rdquo; is checked, %id%/ expands to mainframe-banking-system-facade/ during loading. doc-ref is set to readme.md, which in combination with base-uri of this element and its containing element resolves to api-appliction/mainframe-banking-system-facade/readme.md. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Database Stores user registration information, hashed authentication credentials, access logs, etc. Uses Sign In Controller Allows users to sign in to the Internet Banking System. Mainframe Banking System Facade A facade onto the mainframe banking system. Security Component Provides functionality related to signing in, changing passwords, etc. Uses Uses Reset Password Controller Allows users to reset their passwords with a single use URL. Uses Accounts Summary Controller Provides customers wiht a summary of their bank accounts. E-mail Component Sends e-mails to users. API Application Provides Internet banking functionality via a JSP/HTTPS API. Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Single-Page Application Provides all of the Internet banking functionality to customers via their web browser. Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Mobile App Provides a limited subset of the Internet banking functionality to customers via their mobile device. Reads from and writes to [SQL/TCP] Sends e-mail using Makes API calls to [XML/HTTPS] Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Database Stores user registration information, hashed authentication credentials, access logs, etc. Uses Sign In Controller Allows users to sign in to the Internet Banking System. Mainframe Banking System Facade A facade onto the mainframe banking system. Security Component Provides functionality related to signing in, changing passwords, etc. Uses Uses Reset Password Controller Allows users to reset their passwords with a single use URL. Uses Accounts Summary Controller Provides customers wiht a summary of their bank accounts. E-mail Component Sends e-mails to users. API Application Provides Internet banking functionality via a JSP/HTTPS API. Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Single-Page Application Provides all of the Internet banking functionality to customers via their web browser. Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Mobile App Provides a limited subset of the Internet banking functionality to customers via their mobile device. Reads from and writes to [SQL/TCP] Sends e-mail using Makes API calls to [XML/HTTPS]"},"demo/internet-banking-system-c4/cerulean/references/elements/internet-banking-system/references/elements/api-application/references/elements/mainframe-banking-system-facade/index.html":{"path":"Internet Banking System/API Application/Mainframe Banking System Facade","action-uuid":"3454c686-9615-4fb3-8691-39168f622b1d","title":"Mainframe Banking System Facade","content":"The the above diagram is a Code diagram, which is used to show how a component is implemented as code. Diagram elements were taken from the Drawio UML shapes palette. Icons were added by manually adding image=https://cdn.jsdelivr.net/gh/Nasdanika-Models/ecore@master/graph/web-resources/icons/EClass.gif; to the style. Mapping The package container maps to the same semantic element as on the API Application Component diagram because: The &ldquo;Mainframe Banking System Facade&rdquo; element on the API Application Component diagram links to this diagram page. The package element on this diagram has page-element property set to true. Semantic elements of the child elements of the &ldquo;API Application&rdquo; element are mapped to the elements reference with ordering by label comparator: container:\n  self:\n    elements:\n      path: 1\n      comparator: label\n All code elements within the package are mapped to c4.Code. Representation element filtering Fill color of MainframeBankingSystemFacadeImpl is set during the generation with the following code: @Override\nprotected void filterRepresentationElement(\n\t\tElement representationElement, \n\t\tEObject semanticElement,\n\t\tMap&lt;EObject, EObject&gt; registry, \n\t\tProgressMonitor progressMonitor) {\n\n\tsuper.filterRepresentationElement(representationElement, semanticElement, registry, progressMonitor);\n\t\n\tif (representationElement instanceof Node) {\n\t\tNode node = (Node) representationElement;\n\t\tif (&quot;MainframeBankingSystemFacadeImpl&quot;.equals(node.getId())) {\n\t\t\tnode.getStyle().put(&quot;fillColor&quot;, &quot;#ffe6cc&quot;);\n\t\t\tnode.getStyle().put(&quot;strokeColor&quot;, &quot;#d79b00&quot;);\n\t\t}\n\t}\t\t\t\t\t\n}\n Representation filtering may be used to inject information which is not available during diagram creation or dynamic, but is available during generation. In this example the background color may represent code component &ldquo;health&rdquo; - code coverage, number and severity of SonarQube findings, etc. At higher level diagrams it may represent, say: During construction: development progress - pending, in progress, blocked, behind schedule, &hellip; After deployment: container runtime status - errors, CPU load, memory consumption, &hellip; +throws MainframeBankingSystemFacadeImpl AbstractResponse AbstractRequest GetBalanceRequest GetBalanceResponse BankingSystemConnection MainframeBankingSystemFacade MainframeBankingSystemException +sends +receives +parses +uses +creates com.bigankplc.internetbanking.component.mainframe A facade onto the mainframe banking system. InternetBankingSystemException +throws MainframeBankingSystemFacadeImpl AbstractResponse AbstractRequest GetBalanceRequest GetBalanceResponse BankingSystemConnection MainframeBankingSystemFacade MainframeBankingSystemException +sends +receives +parses +uses +creates com.bigankplc.internetbanking.component.mainframe A facade onto the mainframe banking system. InternetBankingSystemException"},"references/eClassifiers/CompositeNode/inheritance.html":{"path":"Composite Node/Inheritance","action-uuid":"7754ea76-8887-4677-9d15-f2d640bc80cc","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eClassifiers/Domain/index.html":{"action-uuid":"f5f1b678-5751-44fa-b1c1-8ee45aa2bb5a","title":"Domain","content":"Domains allow to organize architecture description elements into a hierarchy"},"demo/internet-banking-system-c4/cerulean/references/elements/internet-banking-system/references/outgoingConnections/send-email-using/index.html":{"path":"Internet Banking System/Sends e-mail using","action-uuid":"bbfe6bb9-db4f-4ec0-9779-21dbdad06fe6","title":"Sends e-mail using","content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."},"references/eSubpackages/c4/references/eClassifiers/Container/index.html":{"path":"C4/Container","action-uuid":"54819a7c-522f-47fd-9045-6bc62fa8571a","title":"Container","content":"Not Docker! In the C4 model, a container represents an application or a data store. A container is something that needs to be running in order for the overall software system to work. In real terms, a container is something like: Server-side web application: A Java EE web application running on Apache Tomcat, an ASP.NET MVC application running on Microsoft IIS, a Ruby on Rails application running on WEBrick, a Node.js application, etc. Client-side web application: A JavaScript application running in a web browser using Angular, Backbone.JS, jQuery, etc. Client-side desktop application: A Windows desktop application written using WPF, an OS X desktop application written using Objective-C, a cross-platform desktop application written using JavaFX, etc. Mobile app: An Apple iOS app, an Android app, a Microsoft Windows Phone app, etc. Server-side console application: A standalone (e.g. &ldquo;public static void main&rdquo;) application, a batch process, etc. Serverless function: A single serverless function (e.g. Amazon Lambda, Azure Function, etc). Database: A schema or database in a relational database management system, document store, graph database, etc such as MySQL, Microsoft SQL Server, Oracle Database, MongoDB, Riak, Cassandra, Neo4j, etc. Blob or content store: A blob store (e.g. Amazon S3, Microsoft Azure Blob Storage, etc) or content delivery network (e.g. Akamai, Amazon CloudFront, etc). File system: A full local file system or a portion of a larger networked file system (e.g. SAN, NAS, etc). Shell script: A single shell script written in Bash, etc. etc1 Copied verbatim from The C4 model for visualizing software architecture under the terms of Creative Commons Attribution 4.0 International License. â†©"},"references/eSubpackages/c4/references/eClassifiers/Context/inheritance.html":{"path":"C4/Context/Inheritance","action-uuid":"9be9b5e6-28e4-449a-a48f-b2d80cd462a3","title":"Inheritance","content":"Supertypes "},"demo/c4/cerulean/glossary.html":{"action-uuid":"e656dff4-450a-4ebd-ba5c-329fd28e6289","title":"Glossary","content":"Clear Identifier(s) Hide UUID {{data.value.name}} {{data.value[0].value}} {{item.value}}"},"demo/internet-banking-system/references/elements/internet-banking-system/references/elements/api-application/references/elements/mainframe-banking-system-facade/index.html":{"path":"Internet Banking System/API Application/com.bigankplc.internetbanking.component.mainframe","action-uuid":"8500c767-9bb2-4cee-bf74-91ab1219823d","title":"com.bigankplc.internetbanking.component.mainframe","content":"The the above diagram is a Code diagram, which is used to show how a component is implemented as code. Diagram elements were taken from the Drawio UML shapes palette. Icons were added by manually adding image=https://cdn.jsdelivr.net/gh/Nasdanika-Models/ecore@master/graph/web-resources/icons/EClass.gif; to the style. Mapping The package container maps to the same semantic element as on the API Application Component diagram because: The &ldquo;Mainframe Banking System Facade&rdquo; element on the API Application Component diagram links to this diagram page. The package element on this diagram has page-element property set to true. Semantic elements of the child elements of the &ldquo;API Application&rdquo; element are mapped to the elements reference with ordering by label comparator: container:\n  self:\n    elements:\n      path: 1\n      comparator: label\n All code elements within the package are mapped to Nodes. Representation element filtering Fill color of MainframeBankingSystemFacadeImpl is set during the generation with the following code: @Override\nprotected void filterRepresentationElement(\n\t\tElement representationElement, \n\t\tEObject semanticElement,\n\t\tMap&lt;EObject, EObject&gt; registry, \n\t\tProgressMonitor progressMonitor) {\n\n\tsuper.filterRepresentationElement(representationElement, semanticElement, registry, progressMonitor);\n\t\n\tif (representationElement instanceof Node) {\n\t\tNode node = (Node) representationElement;\n\t\tif (&quot;MainframeBankingSystemFacadeImpl&quot;.equals(node.getId())) {\n\t\t\tnode.getStyle().put(&quot;fillColor&quot;, &quot;#ffe6cc&quot;);\n\t\t\tnode.getStyle().put(&quot;strokeColor&quot;, &quot;#d79b00&quot;);\n\t\t}\n\t}\t\t\t\t\t\n}\n Representation filtering may be used to inject information which is not available during diagram creation or dynamic, but is available during generation. In this example the background color may represent code component &ldquo;health&rdquo; - code coverage, number and severity of SonarQube findings, etc. At higher level diagrams it may represent, say: During construction: development progress - pending, in progress, blocked, behind schedule, &hellip; After deployment: container runtime status - errors, CPU load, memory consumption, &hellip; +throws MainframeBankingSystemFacadeImpl AbstractResponse AbstractRequest GetBalanceRequest GetBalanceResponse BankingSystemConnection MainframeBankingSystemFacade MainframeBankingSystemException +sends +receives +parses +uses +creates com.bigankplc.internetbanking.component.mainframe A facade onto the mainframe banking system. InternetBankingSystemException +throws MainframeBankingSystemFacadeImpl AbstractResponse AbstractRequest GetBalanceRequest GetBalanceResponse BankingSystemConnection MainframeBankingSystemFacade MainframeBankingSystemException +sends +receives +parses +uses +creates com.bigankplc.internetbanking.component.mainframe A facade onto the mainframe banking system. InternetBankingSystemException"},"references/eSubpackages/c4/references/eClassifiers/Person/inheritance.html":{"path":"C4/Person/Inheritance","action-uuid":"ab2c0452-7e0f-4f00-91e0-6a3ee376bbdd","title":"Inheritance","content":"Supertypes "},"demo/c4/cerulean/search.html":{"action-uuid":"0c8a9fb9-9592-4a91-acd2-ba69cddf24fb","title":"Search","content":"Clear"},"demo/internet-banking-system/glossary.html":{"action-uuid":"9923791c-7d69-43eb-84b4-a69e7dbe44df","title":"Glossary","content":"Clear Identifier(s) Hide UUID {{data.value.name}} {{data.value[0].value}} {{item.value}}"},"references/eClassifiers/RelationshipTarget/index.html":{"action-uuid":"8903d76f-14b4-410e-8a13-6b157e8c6615","title":"Relationship Target","content":"An architecture description element which can have incoming relationships."},"references/eSubpackages/c4/references/eClassifiers/Context/index.html":{"path":"C4/Context","action-uuid":"a634da00-704f-4178-9902-b531dc0e28ea","title":"Context","content":"A grouping of architecture elements."},"demo/internet-banking-system/references/elements/internet-banking-system/references/elements/api-application/index.html":{"path":"Internet Banking System/API Application","action-uuid":"ea811a27-4884-422e-99f9-4981a5c25185","title":"API Application","content":"The the above diagram is a Component diagram, which is used to &ldquo;decompose each container further to identify the major structural building blocks and their interactions&rdquo;. Mapping Surroundings -&gt; selectors Similar to the container diagram, diagram elements representing the surroundings of the &ldquo;API Application&rdquo; are mapped to semantic elements defined on the higher level diagrams using selectors. The system context diagram defines the surrounding nodes and this diagram references them. This is a selector of the &ldquo;Single-Page Application&rdquo;: getDocument().getModelElementById('single-page-application')\n The loading logic &ldquo;carries over&rdquo; tooltips from the System Context Diagram to this diagram. API Application The &ldquo;API Application&rdquo; container maps to the same semantic element as on the Container diagram because: The &ldquo;API Application&rdquo; element on the Container diagram links to this diagram page. The &ldquo;API Application&rdquo; element on this diagram has page-element property set to true. Semantic elements of the child elements of the &ldquo;API Application&rdquo; element are mapped to the elements reference and ordered with the right-down comparator: container:\n  self:\n    elements:\n      path: 1\n      comparator: right-down\n Components All components within the container except the &ldquo;Mainframe Banking System Facade&rdquo; are mapped to Nodes. The &ldquo;Mainframe Banking System Facade&rdquo; component is mapped to CompositeNode because it has sub-elements. It is linked to the &ldquo;Mainframe Banking System Facade Code&rdquo; page. As such, its semantic element is mapped to the &ldquo;Mainframe Banking System Facade Code&rdquo; page element as well allowing further mapping on that page. This diagram element defines base-uri property as %id%/. Because &ldquo;Placeholders&rdquo; is checked, %id%/ expands to mainframe-banking-system-facade/ during loading. doc-ref is set to readme.md, which in combination with base-uri of this element and its containing element resolves to api-appliction/mainframe-banking-system-facade/readme.md. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Database Stores user registration information, hashed authentication credentials, access logs, etc. Uses Sign In Controller Allows users to sign in to the Internet Banking System. Mainframe Banking System Facade A facade onto the mainframe banking system. Security Component Provides functionality related to signing in, changing passwords, etc. Uses Uses Reset Password Controller Allows users to reset their passwords with a single use URL. Uses Accounts Summary Controller Provides customers wiht a summary of their bank accounts. E-mail Component Sends e-mails to users. API Application Provides Internet banking functionality via a JSP/HTTPS API. Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Single-Page Application Provides all of the Internet banking functionality to customers via their web browser. Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Mobile App Provides a limited subset of the Internet banking functionality to customers via their mobile device. Reads from and writes to [SQL/TCP] Sends e-mail using Makes API calls to [XML/HTTPS] Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Database Stores user registration information, hashed authentication credentials, access logs, etc. Uses Sign In Controller Allows users to sign in to the Internet Banking System. Mainframe Banking System Facade A facade onto the mainframe banking system. Security Component Provides functionality related to signing in, changing passwords, etc. Uses Uses Reset Password Controller Allows users to reset their passwords with a single use URL. Uses Accounts Summary Controller Provides customers wiht a summary of their bank accounts. E-mail Component Sends e-mails to users. API Application Provides Internet banking functionality via a JSP/HTTPS API. Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Single-Page Application Provides all of the Internet banking functionality to customers via their web browser. Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Mobile App Provides a limited subset of the Internet banking functionality to customers via their mobile device. Reads from and writes to [SQL/TCP] Sends e-mail using Makes API calls to [XML/HTTPS]"},"demo/internet-banking-system-c4/sketchy/references/elements/internet-banking-system/index.html":{"action-uuid":"bfa3ac19-b4f2-421d-9ce1-e0af4e1e0a60","title":"Internet Banking System","content":"The the above diagram is a Container diagram, which is &ldquo;zoom-in to the system boundary&rdquo;. Mapping Surroundings -&gt; selectors &ldquo;Personal Banking Customer&rdquo;, &ldquo;E-mail System&rdquo;, and &ldquo;Mainframe Banking System&rdquo; diagram elements are mapped to the same semantic elements as on the System Context Diagram using selectors. The system context diagram defines the surrounding nodes and this diagram references them. This is a selector of the &ldquo;E-mail System&rdquo;: getDocument().getModelElementByProperty('semantic-id', 'microsoft-exchange')\n The loading logic &ldquo;carries over&rdquo; tooltips from the System Context Diagram to this diagram. Internet Banking System The &ldquo;Internet Banking System&rdquo; container maps to the same semantic element as on the System Context diagram because: The &ldquo;Internet Banking System&rdquo; element on the System Context Diagram links to this diagram page. The &ldquo;Internet Banking System&rdquo; element on this diagram has page-element property set to true. Semantic elements of the child elements of the &ldquo;Internet Banking System&rdquo; element are mapped to the elements reference and ordered with the flow comparator: container:\n  self: \n    elements:\n      path: 1\n      comparator: \n        flow: \n          fallback: label\n          condition: id != 'send-email'\n The condition prevents traversal of the &ldquo;API Application&rdquo; -&gt; &ldquo;E-mail System&rdquo; connection. It is not really necessary here - the order would not change without it. It is provided as an example because connection conditions may be necessary in some cases for proper ordering in diagrams with connection cycles. Container elements All diagram elements within the system container are mapped to c4.Containers. The API Application is linked to the &ldquo;Container Diagram&rdquo; page. As such, its semantic element is mapped to the &ldquo;API Application Component Diagram&rdquo; page element as well allowing further mapping on that page. The API Application diagram element defines base-uri property as %id%/. Because &ldquo;Placeholders&rdquo; is checked, %id%/ expands to api-application/ during loading. doc-ref is set to readme.md, which in combination with base-uri resolves to api-appliction/readme.md. Personal Banking Customer A customer of the bank, with personal bank accounts. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Database Stores user registration information, hashed authentication credentials, access logs, etc. Delivers to the customer's web browser Web Application Delivers the static content and the Internet banking single page application. Makes API calls to [JSON/HTTPS] Single-Page Application Provides all of the Internet banking functionality to customers via their web browser. Makes API calls to [JSON/HTTPS] Mobile App Provides a limited subset of the Internet banking functionality to customers via their mobile device. Reads from and writes to [SQL/TCP] API Application Provides Internet banking functionality via a JSP/HTTPS API. Internet Banking System Allows customers to view information about their bank accounts, and make payments. Sends e-mails to Sends e-mail using Makes API calls to [XML/HTTPS] Visits bigbank.com/ib using [HTTPS] Views account balances, and makes payments using Views account balances, and makes payments using Personal Banking Customer A customer of the bank, with personal bank accounts. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Database Stores user registration information, hashed authentication credentials, access logs, etc. Delivers to the customer's web browser Web Application Delivers the static content and the Internet banking single page application. Makes API calls to [JSON/HTTPS] Single-Page Application Provides all of the Internet banking functionality to customers via their web browser. Makes API calls to [JSON/HTTPS] Mobile App Provides a limited subset of the Internet banking functionality to customers via their mobile device. Reads from and writes to [SQL/TCP] API Application Provides Internet banking functionality via a JSP/HTTPS API. Internet Banking System Allows customers to view information about their bank accounts, and make payments. Sends e-mails to Sends e-mail using Makes API calls to [XML/HTTPS] Visits bigbank.com/ib using [HTTPS] Views account balances, and makes payments using Views account balances, and makes payments using"},"references/eClassifiers/Actor/inheritance.html":{"path":"Actor/Inheritance","action-uuid":"6e85db9d-28d5-4300-a457-1ba924c81c4b","title":"Inheritance","content":"Supertypes Subtypes  "},"demo/c4/sketchy/index.html":{"action-uuid":"47c84543-9483-4a7c-9b39-7ed1832dabca","title":"C4 Template","content":"This is a basic demo of mapping of a Drawio diagrams to the C4 model classes as explained in the Beyond Diagrams book. The diagram was created from https://architecture.models.nasdanika.org/resources/c4-template.drawio template and with https://architecture.models.nasdanika.org/resources/C4.xml library. System Person Relationship System Person Relationship"},"demo/internet-banking-system/index.html":{"action-uuid":"45e46b02-b55f-4537-9d00-54a4c4bac66e","title":"Internet Banking System Architecture","content":"This site was generated as explained below: A Drawio diagram of an Internet Banking System was created based on images and descriptions from The C4 model for visualising software architecture. Descriptions of elements and diagrams were copied verbatim under the terms of Creative Commons Attribution 4.0 International License. The diagram uses free icons from Icons8 to provide visual distinction between architecture elements. The diagram was mapped to the Architecture model using properties of the diagram elements as explained in the Beyond Diagrams book. Then the architecture model was transformed to the HTML Application model and a static web site was generated from that model. For the majority of elements icons were generated from the diagram images of the respective elements. The web site is deployed by GitHub Pages. Notes: Diagram elements have tooltips with descriptions from the C4 model site. A click on a diagram element navigates to the element page. The left navigation provides a filter to quickly find a model element by name. Search provides full-text search which also searches for text in diagrams. Glossary provides a list of &ldquo;terms&rdquo; - a dictionary of the language of the system. It needs improvements - currently it shows all actions. Uncheck &ldquo;Hide UUID&rdquo; to see the elements. Elements can be filtered using the filter text field. There is a link to the source code on GitHub in the footer. Connections (relationships) are not mapped in this demo. The the above diagram is a System Context diagram, which is a good starting point for diagramming and documenting a software system, allowing you to step back and see the big picture. Draw a diagram showing your system as a box in the centre, surrounded by its users and the other systems that it interacts with. Mapping Root -&gt; ArchitectureDescription Surroundings -&gt; Node Internet Banking System -&gt; CompositeNode Root -&gt; ArchitectureDescription The root of the diagram is mapped to Architecture Description with the type property set to ArchitectureDescription This documentation was generated from internet-banking-system-architecture.md markdown file with the image above embedded using png-resource fenced block and the diagram embedded using drawio fenced block with representations/drawio/diagram expansion token. Diagram semantic elements were mapped to the root semantic element (ArchitectureDescription) using the following feature-map: container:\n  self: \n    elements:\n      path: 2\n      comparator: label\n The above mapping means that use the semantic element of this diagram element (root) and add semantic elements of its descendants at path length 2 to the elements reference ordering by label. Path length is set to 2 because the diagram elements are contained by the background layer, which is in turn contained by the root. page-element set to true specifies that the root semantic element shall also be the page&rsquo;s semantic elements. Because this is the top-level page (not linked from diagram elements), it also becomes the document&rsquo;s semantic element and as such the contents element of the diagram&rsquo;s Ecore resource. spec sets archtiecture description name to &ldquo;Internet Banking System Architecture&rdquo; - this is what is displayed in the grey navigation bar above: name: Internet Banking System Architecture\n Surroundings -&gt; Node &ldquo;Personal Banking Customer&rdquo;, &ldquo;E-mail System&rdquo;, and &ldquo;Mainframe Banking System&rdquo; diagram elements are mapped to Node. They have semantic-id property to demonstrate its usage. Another way to provide meaningful ID&rsquo;s and URL&rsquo;s is to edit element ID&rsquo;s - this approach is used on lower-level diagrams. The &ldquo;Personal Banking Customer&rdquo; element does not have an image associated with it and therefore uses an explicit icon spec: icon: https://img.icons8.com/officel/16/user.png\n Tooltips are copied from descriptions on the C4 Model diagram. Internet Banking System -&gt; CompositeNode The &ldquo;Internet Banking System&rdquo; diagram element is mapped to CompositeNode because it has sub-elements. It is linked to the &ldquo;Container Diagram&rdquo; page. As such, its semantic element is mapped to the &ldquo;Container Diagram&rdquo; page element as well allowing further mapping on that page. Generation This site was generated with a JUnit test. Another way to generate documentation site is to use Nasdanika CLI app/model/site command or app/model/action command and then app/site command. Views account balances, and makes payments using Personal Banking Customer A customer of the bank, with personal bank accounts. Gets account information from, and makes payments using Sends e-mail using Internet Banking System Allows customers to view information about their bank accounts, and make payments. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Sends e-mails to Views account balances, and makes payments using Personal Banking Customer A customer of the bank, with personal bank accounts. Gets account information from, and makes payments using Sends e-mail using Internet Banking System Allows customers to view information about their bank accounts, and make payments. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Sends e-mails to"},"demo/c4/cerulean/references/elements/9Xhv3QX139gfRowG86oh-1/index.html":{"action-uuid":"b2b76adb-bdf6-4285-bf02-35acbe2b2165","title":"System","content":"TODO Container System Person HTTPS Container System Person HTTPS"},"references/eClassifiers/Actor/index.html":{"action-uuid":"8b5ab71e-cc9e-4787-9132-cf67f4e80ab8","title":"Actor","content":"Actors play roles/have responsibilies on model elements implementing Undergoer"},"demo/aws/glossary.html":{"action-uuid":"cbf62a4d-f570-4594-bfab-ab24ee5977c7","title":"Glossary","content":"Clear Identifier(s) Hide UUID {{data.value.name}} {{data.value[0].value}} {{item.value}}"},"references/eClassifiers/Tunnel/inheritance.html":{"path":"Tunnel/Inheritance","action-uuid":"37c600bf-6da8-47d0-bbce-7b61f634062c","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/CompositeNode/index.html":{"action-uuid":"8cc40e89-0bb4-4936-8095-cc8a1aeb2c9c","title":"Composite Node","content":"Node which is also a domain. I.e. it may contain other architecture description elements."},"demo/internet-banking-system-c4/sketchy/index.html":{"action-uuid":"cd7b3f75-eb74-4803-9ca4-efd8431eab4d","title":"Internet Banking System Architecture","content":"This site was generated as explained below: A Drawio diagram of an Internet Banking System was created based on images and descriptions from The C4 model for visualising software architecture. Descriptions of elements and diagrams were copied verbatim under the terms of Creative Commons Attribution 4.0 International License. The diagram uses free icons from Icons8 to provide visual distinction between architecture elements. The diagram was mapped to the Architecture model using properties of the diagram elements as explained in the Beyond Diagrams book. Then the architecture model was transformed to the HTML Application model and a static web site was generated from that model. For the majority of elements icons were generated from the diagram images of the respective elements. The web site is deployed by GitHub Pages. Notes: Diagram elements have tooltips with descriptions from the C4 model site. A click on a diagram element navigates to the element page. The left navigation provides a filter to quickly find a model element by name. Search provides full-text search which also searches for text in diagrams. Glossary provides a list of &ldquo;terms&rdquo; - a dictionary of the language of the system. It needs improvements - currently it shows all actions. Uncheck &ldquo;Hide UUID&rdquo; to see the elements. Elements can be filtered using the filter text field. There is a link to the source code on GitHub in the footer. Only Send e-mail using relationship is mapped and documented in this demo. The the above diagram is a System Context diagram, which is a good starting point for diagramming and documenting a software system, allowing you to step back and see the big picture. Draw a diagram showing your system as a box in the centre, surrounded by its users and the other systems that it interacts with. Mapping Root -&gt; c4.Context Surroundings -&gt; Person, System Internet Banking System -&gt; System Root -&gt; c4.Context The root of the diagram is mapped to Context with the type property set to c4.Context This documentation was generated from internet-banking-system-architecture.md markdown file with the image above embedded using png-resource fenced block and the diagram embedded using drawio fenced block with representations/drawio/diagram expansion token. Diagram semantic elements were mapped to the root semantic element (c4.Context) using the following feature map: container:\n  self: \n    elements:\n      path: 2\n      comparator: label\n The above mapping means that use the semantic element of this diagram element (root) and add semantic elements of its descendants at path length 2 to the elements reference ordering by label. Path length is set to 2 because the diagram elements are contained by the background layer, which is in turn contained by the root. page-element set to true specifies that the root semantic element shall also be the page&rsquo;s semantic elements. Because this is the top-level page (not linked from diagram elements), it also becomes the document&rsquo;s semantic element and as such the contents element of the diagram&rsquo;s Ecore resource. spec sets archtiecture description name to &ldquo;Internet Banking System Architecture&rdquo; - this is what is displayed in the grey navigation bar above: name: Internet Banking System Architecture\n Surroundings -&gt; Person, System &ldquo;Personal Banking Customer&rdquo; is mapped to Person. &ldquo;E-mail System&rdquo;, and &ldquo;Mainframe Banking System&rdquo; diagram elements are mapped to System. They have semantic-id property to demonstrate its usage. Another way to provide meaningful ID&rsquo;s and URL&rsquo;s is to edit element ID&rsquo;s - this approach is used on lower-level diagrams. The &ldquo;Personal Banking Customer&rdquo; element does not have an image associated with it and therefore uses an explicit icon spec: icon: https://img.icons8.com/officel/16/user.png\n Tooltips are copied from descriptions on the C4 Model diagram. Internet Banking System -&gt; System The &ldquo;Internet Banking System&rdquo; diagram element is mapped to System. It is linked to the &ldquo;Container Diagram&rdquo; page. As such, its semantic element is mapped to the &ldquo;Container Diagram&rdquo; page element as well allowing further mapping on that page. Generation This site was generated with a JUnit test. Another way to generate documentation site is to use Nasdanika CLI app/model/site command or app/model/action command and then app/site command. Views account balances, and makes payments using Personal Banking Customer A customer of the bank, with personal bank accounts. Gets account information from, and makes payments using Sends e-mail using Internet Banking System Allows customers to view information about their bank accounts, and make payments. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Sends e-mails to Views account balances, and makes payments using Personal Banking Customer A customer of the bank, with personal bank accounts. Gets account information from, and makes payments using Sends e-mail using Internet Banking System Allows customers to view information about their bank accounts, and make payments. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Sends e-mails to"},"demo/internet-banking-system/search.html":{"action-uuid":"3d5755ab-93c4-4047-869b-9657e415dbc6","title":"Search","content":"Clear"},"references/eClassifiers/Undergoer/inheritance.html":{"path":"Undergoer/Inheritance","action-uuid":"169696d5-15c2-4943-94e6-3e301daad64a","title":"Inheritance","content":"Subtypes "},"demo/c4/sketchy/references/elements/user/references/outgoingConnections/9Xhv3QX139gfRowG86oh-3/index.html":{"path":"Person/Relationship","action-uuid":"404e9ace-eba3-4450-a598-6d839c7cccfc","title":"Relationship","content":"TODO"},"demo/internet-banking-system-c4/cerulean/glossary.html":{"action-uuid":"258966d7-92c3-410e-9ea9-2b9292c061b9","title":"Glossary","content":"Clear Identifier(s) Hide UUID {{data.value.name}} {{data.value[0].value}} {{item.value}}"},"demo/c4/cerulean/references/elements/9Xhv3QX139gfRowG86oh-1/references/elements/Q9qKH9tl9N2e6UXnhQ6L-3/index.html":{"path":"System/Container","action-uuid":"7318a4d9-aced-436a-aecd-45abb915289b","title":"Container","content":"TODO Representation not found: drawio"},"references/eSubpackages/c4/references/eClassifiers/Code/index.html":{"path":"C4/Code","action-uuid":"85ce11ab-fe63-433f-8955-dbc12845b655","title":"Code","content":"Code elements (e.g. classes, interfaces, objects, functions, database tables, etc) within the component in scope.1 Adapted from The C4 model for visualizing software architecture under the terms of Creative Commons Attribution 4.0 International License. â†©"},"index.html":{"action-uuid":"c9dda4da-f128-4790-8b34-bc9801217960","title":"Architecture Model","content":"This model provides classes for documenting (software) architectures. It is built on top of the Graph model The model can be used AS-IS or as a base for specialized models. C4 sub-package is an example of such a specialized model. Internet Banking System Architecture (sources) is an example of AS-IS use and mapping of a Drawio diagram to this model to generate HTML documentation. The mapping process is explained in the Beyond Diagrams book. The below diagram shows model elements and their relationships. Inherited relationships are not shown. Architecture element is the base class for other model elements. It may have an icon, a name, documentation, and start/end. Start and end may be absolute or relative. Undergoer interface is implemented by classes which can be acted/operated upon by actors in roles. Roles are defined at the undergoer level. Architecture Description extends Architecture Element, Undergoer, and Documented Named Graph. It means that it may contain graph elements, including Architecture Description Elements. It may define actors. Architecture Description Element extends Architecture Element, Undergoer, and Documented Named Graph Element, i.e. it can be an element of Architecture Description (as the name suggests) and other graphs. Relationship extends Architecture Element, Undergoer, and Documented Named Connection. I.e. it may connect sources and targets, including relationship source and relationship target. Tunnel is a specialization of Relationship which can aggregate (group) other relationships. Domain is both Architecture Description and Architecture Description Element. Domains can be used create a hierarchy of architecture descriptions, similar to file system directories. Relationship source is an Architecture Description Element which can be a source of relationships. Relationship target is an Architecture Description Element which can be a target of relationships. Node is both relationship source and target. Relationship source, target and Node have Composite flavors which are also domains, i.e. may contain Architecture Description Elements. See Also Graph Model Graph Drawio Connecting the dots Executable (computational) graphs &amp; diagrams Beyond Diagrams Architecture Element Architecture Description Architecture Description Element Relationship Tunnel Undergoer Role roles Actor Party Actor Person Actor Domain Relationship Source Relationship Target Composite Relationship Source Composite Relationship Target Node Composite Node roles actors"},"references/eClassifiers/ArchitectureElement/index.html":{"action-uuid":"445a2b13-6078-41e0-a2cc-93e6657b3da2","title":"Architecture Element","content":"Base class for elements of architecture."},"demo/aws/references/elements/UEzPUAAOIrF-is8g5C7q-175/references/elements/UEzPUAAOIrF-is8g5C7q-177/index.html":{"path":"AWS Cloud/Amazon S3 Bucket","action-uuid":"5e1a569e-8414-484b-ad0f-c27ab3d76dd3","title":"Amazon S3 Bucket","content":"S3 Bucket full of digital water. Amazon S3 Bucket Actor Amazon S3 Bucket Actor"},"references/eSubpackages/c4/index.html":{"action-uuid":"bfd52bb7-7472-4550-9095-9219eb60af98","title":"C4","content":"Classes in this package are mappings of the architecture model classes to the abstractions of the The C4 model for visualising software architecture. The classes in this package do not introduce any new structural features (attributes or references) or operations, just new semantics. E.g. System and Container extend CompositeNode - they can have documentation, icon, incoming and outgoing connections, nested elements, &hellip; The difference between them is in definitions. Demos Internet Banking System Generated documentation sites with different Bootswatch themes: Cerulean - can be used to publish the base line architecture - what is already deployed. Sketchy - can be used to publish future architectures. Source code Basic demo Generated documentation sites with different Bootswatch themes: Cerulean Sketchy Source code Quick Start Start Drawio editor - in-browser, desktop (also drawio.io Diagrams in Microsoft Store), or VS Code extension. Create a new diagram from https://architecture.models.nasdanika.org/resources/c4-template.drawio template Add https://architecture.models.nasdanika.org/resources/C4.xml library Add elements from the C4 library above to the diagram. You may edit elements id&rsquo;s or add semantic-id property to have meaningful (semantic) URL&rsquo;s in generated documentation and meaningful identifiers for cross-referencing. Create additional diagram pages for diagram elements with internal structures. E.g. a System consisting of Containers. Link the diagram elements to their respective pages. There can be multiple levels of diagram hierarchy. Add Context container from the C4 library to a sub-diargram page. Add children of the diagram element to the context container. E.g. containers to a system context container. Add diagram elements to link already defined elements. E.g. a Person. Remove type property and add selector property to link the diagram element to an already defined mapping of a diagram element to a semantic element. For example, getDocument().getModelElementById('user') would link a diagram element to another diagram element with id user. getDocument().getModelElementByProperty('semantic-id', 'personal-banking-customer') selects an element by its property value. It is also possible to do page-level selections: getDocument().getPageByXXX().getModelElementByXXX(). Save the diagram. Use Nasdanika CLI app/model/site command or app/model/action command and then app/site command to generate documentation site. Linking relationships Relationships documentation can be accessed by clicking relationships on diagrams in generated documentation. To link relationships from Markdown use references/outgoingConnections/&lt;id&gt;/index.html URL relative to the relationship source. &lt;id&gt; stands for the semantic id, which defaults to the diagram element id if not set via semantic-id property. Sample command nsd app model site -f C:\\_temp\\c4\\c4.drawio C:\\_temp\\c4\\site --root-action-text=&quot;Nasdanika C4 Model Demos&quot;\n Resources Architecture As Code story explains high level concepts and possible applications of the architecture model Beyond Diagrams book provides a detailed explanation how to map Drawio diagrams to semantic models, make them executable, &hellip; Reference documentation"},"references/eSubpackages/c4/references/eClassifiers/Component/inheritance.html":{"path":"C4/Component/Inheritance","action-uuid":"2de1486f-bbc5-4488-bce2-4bbadb437f2b","title":"Inheritance","content":"Supertypes "},"demo/c4/sketchy/glossary.html":{"action-uuid":"e4ac350c-f27d-46bd-9711-6314b7e3b75d","title":"Glossary","content":"Clear Identifier(s) Hide UUID {{data.value.name}} {{data.value[0].value}} {{item.value}}"},"references/eClassifiers/PartyActor/index.html":{"action-uuid":"43b0204f-b102-4e29-a9fa-121b0a09f7c9","title":"Party actor","content":"A party actor."},"references/eSubpackages/c4/references/eClassifiers/Container/inheritance.html":{"path":"C4/Container/Inheritance","action-uuid":"62c0a596-d2ec-45d8-8604-05ce47940c1d","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Actor/references/eStructuralFeatures/roles/index.html":{"path":"Actor/References/roles","action-uuid":"35517440-7c17-498f-b6bc-5da60b948e30","title":"roles","content":"Roles played by this actor"},"demo/internet-banking-system-c4/sketchy/glossary.html":{"action-uuid":"e16c1b8e-747f-46ea-9a18-a227a0385812","title":"Glossary","content":"Clear Identifier(s) Hide UUID {{data.value.name}} {{data.value[0].value}} {{item.value}}"},"references/eClassifiers/CompositeRelationshipSource/inheritance.html":{"path":"Composite Relationship Source/Inheritance","action-uuid":"b74510b1-c2ef-40ab-be8f-a4ab3cc5e774","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Node/index.html":{"action-uuid":"abe3c4d6-cec3-4e11-8b00-5ef089d8700c","title":"Node","content":"Node is both relationship source and target. I.e. it may have both incoming and outgoing relationships."},"demo/c4/sketchy/search.html":{"action-uuid":"e21e01cf-2eb0-4810-bed6-d70aef7aa621","title":"Search","content":"Clear"},"demo/internet-banking-system-c4/sketchy/references/elements/internet-banking-system/references/elements/api-application/index.html":{"path":"Internet Banking System/API Application","action-uuid":"a732993a-6ccd-48a7-8132-53452f7aaeb3","title":"API Application","content":"The the above diagram is a Component diagram, which is used to &ldquo;decompose each container further to identify the major structural building blocks and their interactions&rdquo;. Mapping Surroundings -&gt; selectors Similar to the container diagram, diagram elements representing the surroundings of the &ldquo;API Application&rdquo; are mapped to semantic elements defined on the higher level diagrams using selectors. The system context diagram defines the surrounding nodes and this diagram references them. This is a selector of the &ldquo;Single-Page Application&rdquo;: getDocument().getModelElementById('single-page-application')\n The loading logic &ldquo;carries over&rdquo; tooltips from the System Context Diagram to this diagram. API Application The &ldquo;API Application&rdquo; container maps to the same semantic element as on the Container diagram because: The &ldquo;API Application&rdquo; element on the Container diagram links to this diagram page. The &ldquo;API Application&rdquo; element on this diagram has page-element property set to true. Semantic elements of the child elements of the &ldquo;API Application&rdquo; element are mapped to the elements reference and ordered with the right-down comparator: container:\n  self:\n    elements:\n      path: 1\n      comparator: right-down\n Components All components within the container are mapped to c4.Components. The &ldquo;Mainframe Banking System Facade&rdquo; is linked to the &ldquo;Mainframe Banking System Facade Code&rdquo; page. As such, its semantic element is mapped to the &ldquo;Mainframe Banking System Facade Code&rdquo; page element as well allowing further mapping on that page. This diagram element defines base-uri property as %id%/. Because &ldquo;Placeholders&rdquo; is checked, %id%/ expands to mainframe-banking-system-facade/ during loading. doc-ref is set to readme.md, which in combination with base-uri of this element and its containing element resolves to api-appliction/mainframe-banking-system-facade/readme.md. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Database Stores user registration information, hashed authentication credentials, access logs, etc. Uses Sign In Controller Allows users to sign in to the Internet Banking System. Mainframe Banking System Facade A facade onto the mainframe banking system. Security Component Provides functionality related to signing in, changing passwords, etc. Uses Uses Reset Password Controller Allows users to reset their passwords with a single use URL. Uses Accounts Summary Controller Provides customers wiht a summary of their bank accounts. E-mail Component Sends e-mails to users. API Application Provides Internet banking functionality via a JSP/HTTPS API. Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Single-Page Application Provides all of the Internet banking functionality to customers via their web browser. Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Mobile App Provides a limited subset of the Internet banking functionality to customers via their mobile device. Reads from and writes to [SQL/TCP] Sends e-mail using Makes API calls to [XML/HTTPS] Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Database Stores user registration information, hashed authentication credentials, access logs, etc. Uses Sign In Controller Allows users to sign in to the Internet Banking System. Mainframe Banking System Facade A facade onto the mainframe banking system. Security Component Provides functionality related to signing in, changing passwords, etc. Uses Uses Reset Password Controller Allows users to reset their passwords with a single use URL. Uses Accounts Summary Controller Provides customers wiht a summary of their bank accounts. E-mail Component Sends e-mails to users. API Application Provides Internet banking functionality via a JSP/HTTPS API. Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Single-Page Application Provides all of the Internet banking functionality to customers via their web browser. Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Makes API calls to [JSON/HTTPS] Mobile App Provides a limited subset of the Internet banking functionality to customers via their mobile device. Reads from and writes to [SQL/TCP] Sends e-mail using Makes API calls to [XML/HTTPS]"},"references/eSubpackages/c4/references/eClassifiers/Person/index.html":{"path":"C4/Person","action-uuid":"0cffa801-96c9-4e8c-9f36-ad1137b3145b","title":"Person","content":"A person represents one of the human users of your software system (e.g. actors, roles, personas, etc).1 Copied verbatim from The C4 model for visualizing software architecture under the terms of Creative Commons Attribution 4.0 International License. â†©"},"references/eClassifiers/Tunnel/index.html":{"action-uuid":"25c5631e-d238-4bf4-b8e7-1172ca68bb1e","title":"Tunnel","content":"Tunnel is a relationship which logically groups (aggregates) other relationships. For example, two composite nodes may have a tunnel relationship which groups relationships between their child elements. A real life example is a VPN tunnel between two networks."},"references/eClassifiers/Node/inheritance.html":{"path":"Node/Inheritance","action-uuid":"7add5e3e-52c5-4e18-85da-0119bb307a62","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eClassifiers/RelationshipSource/inheritance.html":{"path":"Relationship Source/Inheritance","action-uuid":"7c4baddf-e41a-44b3-b6b7-0cbcba36e517","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eSubpackages/c4/references/eClassifiers/Component/index.html":{"path":"C4/Component","action-uuid":"a6f26352-a10a-414a-b326-ac33a8b08438","title":"Component","content":"The word &ldquo;component&rdquo; is a hugely overloaded term in the software development industry, but in this context a component is a grouping of related functionality encapsulated behind a well-defined interface. If you&rsquo;re using a language like Java or C#, the simplest way to think of a component is that it&rsquo;s a collection of implementation classes behind an interface. Aspects such as how those components are packaged (e.g. one component vs many components per JAR file, DLL, shared library, etc) is a separate and orthogonal concern. An important point to note here is that all components inside a container typically execute in the same process space. In the C4 model, components are not separately deployable units.1 Copied verbatim from The C4 model for visualizing software architecture under the terms of Creative Commons Attribution 4.0 International License. â†©"},"demo/aws/index.html":{"action-uuid":"efcf7e24-1d40-4e52-a16a-e8b465f10190","title":"AWS","content":" Amazon VPC Account Baseline Shared Services Account Account Baseline Aggregate CloudTrail and Config Logs Log Archive Account Account Baseline Security Cross-Account Roles Amazon GuardDuty Amazon SNS Security Account Amazon S3 Bucket AWS CodePipeline AWS Organizations AWS Single Sign-on Account Baseline AWS Service Catalog AWS Parameter Store purum Core OU AWS Cloud Amazon VPC Account Baseline Shared Services Account Account Baseline Aggregate CloudTrail and Config Logs Log Archive Account Account Baseline Security Cross-Account Roles Amazon GuardDuty Amazon SNS Security Account Amazon S3 Bucket AWS CodePipeline AWS Organizations AWS Single Sign-on Account Baseline AWS Service Catalog AWS Parameter Store purum Core OU AWS Cloud"},"demo/c4/sketchy/references/elements/user/index.html":{"action-uuid":"89073a2e-7578-48b5-adce-12fadd116884","title":"Person","content":"TODO TODO"},"references/eClassifiers/PersonActor/index.html":{"action-uuid":"957346f5-afdd-4e9c-93c3-72a211e7c7e8","title":"Person Actor","content":"A person actor."},"references/eClassifiers/Undergoer/references/eStructuralFeatures/roles/index.html":{"path":"Undergoer/References/roles","action-uuid":"5d589e58-480a-472c-bf66-573547ad758c","title":"roles","content":"Roles operating on this undergoer"},"demo/internet-banking-system-c4/sketchy/search.html":{"action-uuid":"27d36fb6-1932-43fd-a182-153d2c2d9292","title":"Search","content":"Clear"},"references/eClassifiers/CompositeRelationshipTarget/index.html":{"action-uuid":"477eb2bb-ec9f-48c2-ae83-8062a83f9610","title":"Composite Relationship Target","content":"Relationship target which is also a domain, i.e. it may contain other architecture description elements"},"demo/internet-banking-system-c4/cerulean/index.html":{"action-uuid":"6970c6df-013c-4a65-8953-c116b810b810","title":"Internet Banking System Architecture","content":"This site was generated as explained below: A Drawio diagram of an Internet Banking System was created based on images and descriptions from The C4 model for visualising software architecture. Descriptions of elements and diagrams were copied verbatim under the terms of Creative Commons Attribution 4.0 International License. The diagram uses free icons from Icons8 to provide visual distinction between architecture elements. The diagram was mapped to the Architecture model using properties of the diagram elements as explained in the Beyond Diagrams book. Then the architecture model was transformed to the HTML Application model and a static web site was generated from that model. For the majority of elements icons were generated from the diagram images of the respective elements. The web site is deployed by GitHub Pages. Notes: Diagram elements have tooltips with descriptions from the C4 model site. A click on a diagram element navigates to the element page. The left navigation provides a filter to quickly find a model element by name. Search provides full-text search which also searches for text in diagrams. Glossary provides a list of &ldquo;terms&rdquo; - a dictionary of the language of the system. It needs improvements - currently it shows all actions. Uncheck &ldquo;Hide UUID&rdquo; to see the elements. Elements can be filtered using the filter text field. There is a link to the source code on GitHub in the footer. Only Send e-mail using relationship is mapped and documented in this demo. The the above diagram is a System Context diagram, which is a good starting point for diagramming and documenting a software system, allowing you to step back and see the big picture. Draw a diagram showing your system as a box in the centre, surrounded by its users and the other systems that it interacts with. Mapping Root -&gt; c4.Context Surroundings -&gt; Person, System Internet Banking System -&gt; System Root -&gt; c4.Context The root of the diagram is mapped to Context with the type property set to c4.Context This documentation was generated from internet-banking-system-architecture.md markdown file with the image above embedded using png-resource fenced block and the diagram embedded using drawio fenced block with representations/drawio/diagram expansion token. Diagram semantic elements were mapped to the root semantic element (c4.Context) using the following feature map: container:\n  self: \n    elements:\n      path: 2\n      comparator: label\n The above mapping means that use the semantic element of this diagram element (root) and add semantic elements of its descendants at path length 2 to the elements reference ordering by label. Path length is set to 2 because the diagram elements are contained by the background layer, which is in turn contained by the root. page-element set to true specifies that the root semantic element shall also be the page&rsquo;s semantic elements. Because this is the top-level page (not linked from diagram elements), it also becomes the document&rsquo;s semantic element and as such the contents element of the diagram&rsquo;s Ecore resource. spec sets archtiecture description name to &ldquo;Internet Banking System Architecture&rdquo; - this is what is displayed in the grey navigation bar above: name: Internet Banking System Architecture\n Surroundings -&gt; Person, System &ldquo;Personal Banking Customer&rdquo; is mapped to Person. &ldquo;E-mail System&rdquo;, and &ldquo;Mainframe Banking System&rdquo; diagram elements are mapped to System. They have semantic-id property to demonstrate its usage. Another way to provide meaningful ID&rsquo;s and URL&rsquo;s is to edit element ID&rsquo;s - this approach is used on lower-level diagrams. The &ldquo;Personal Banking Customer&rdquo; element does not have an image associated with it and therefore uses an explicit icon spec: icon: https://img.icons8.com/officel/16/user.png\n Tooltips are copied from descriptions on the C4 Model diagram. Internet Banking System -&gt; System The &ldquo;Internet Banking System&rdquo; diagram element is mapped to System. It is linked to the &ldquo;Container Diagram&rdquo; page. As such, its semantic element is mapped to the &ldquo;Container Diagram&rdquo; page element as well allowing further mapping on that page. Generation This site was generated with a JUnit test. Another way to generate documentation site is to use Nasdanika CLI app/model/site command or app/model/action command and then app/site command. Views account balances, and makes payments using Personal Banking Customer A customer of the bank, with personal bank accounts. Gets account information from, and makes payments using Sends e-mail using Internet Banking System Allows customers to view information about their bank accounts, and make payments. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Sends e-mails to Views account balances, and makes payments using Personal Banking Customer A customer of the bank, with personal bank accounts. Gets account information from, and makes payments using Sends e-mail using Internet Banking System Allows customers to view information about their bank accounts, and make payments. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Sends e-mails to"},"references/eClassifiers/PartyActor/inheritance.html":{"path":"Party actor/Inheritance","action-uuid":"363d76bc-d002-44ea-85d2-fae743fbda42","title":"Inheritance","content":"Supertypes Subtypes  "},"glossary.html":{"action-uuid":"6dc7cfaa-1a6c-4610-8ee5-4bdd098aeb2e","title":"Glossary","content":"Clear Identifier(s) Hide UUID {{data.value.name}} {{data.value[0].value}} {{item.value}}"},"references/eSubpackages/c4/references/eClassifiers/Relationship/inheritance.html":{"path":"C4/Relationship/Inheritance","action-uuid":"a24d13a2-1075-4f61-81a7-9f3d8d79d72b","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/Relationship/index.html":{"action-uuid":"82e4969a-a5b0-4aec-8a8a-3fb8dee68d5a","title":"Relationship","content":"Relationship between relationship source and relationship target. Relationships are contained by their source and uniquiely identified in the source by a string id. This allows to implement relationship inheritance behaviors such as overriding (replacing), adding, or removing."},"references/eClassifiers/CompositeRelationshipSource/index.html":{"action-uuid":"d89d181b-9abf-47f7-95ac-72dc8c565387","title":"Composite Relationship Source","content":"Relationship source which is also a domain. I.e. it may contain other architecture description elements."},"references/eClassifiers/Domain/inheritance.html":{"path":"Domain/Inheritance","action-uuid":"67066c01-6222-4f08-a15f-d02c9ce2a8d2","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eClassifiers/ArchitectureDescription/inheritance.html":{"path":"Architecture Description/Inheritance","action-uuid":"ef1f7cf4-e29f-4d11-a252-83c86319d907","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eClassifiers/RelationshipTarget/inheritance.html":{"path":"Relationship Target/Inheritance","action-uuid":"d38dd3c1-183b-4691-95cb-ea02d5ce4808","title":"Inheritance","content":"Supertypes Subtypes  "},"references/eSubpackages/c4/references/eClassifiers/Code/inheritance.html":{"path":"C4/Code/Inheritance","action-uuid":"4f2d5c6b-5a42-4029-91d0-b3c8575fa2f5","title":"Inheritance","content":"Supertypes "},"demo/aws/references/elements/UEzPUAAOIrF-is8g5C7q-175/references/elements/UEzPUAAOIrF-is8g5C7q-184/index.html":{"path":"AWS Cloud/Core OU","action-uuid":"0e7f16cd-e649-4762-9afa-fd496afd6285","title":"Core OU","content":" Actor"},"references/eClassifiers/Undergoer/index.html":{"action-uuid":"79d70a6c-e4df-4d60-93dc-a1bdb8935c02","title":"Undergoer","content":"Something operated on by actors in roles. A container of roles referencing actors. For example, a Server is patched by the &ldquo;Unix Support&rdquo; role and Joe Doe plays this role."},"demo/internet-banking-system/references/elements/internet-banking-system/index.html":{"action-uuid":"7a53a7d3-aa18-4392-9d31-728838b8ee45","title":"Internet Banking System","content":"The the above diagram is a Container diagram, which is &ldquo;zoom-in to the system boundary&rdquo;. Mapping Surroundings -&gt; selectors &ldquo;Personal Banking Customer&rdquo;, &ldquo;E-mail System&rdquo;, and &ldquo;Mainframe Banking System&rdquo; diagram elements are mapped to the same semantic elements as on the System Context Diagram using selectors. The system context diagram defines the surrounding nodes and this diagram references them. This is a selector of the &ldquo;E-mail System&rdquo;: getDocument().getModelElementByProperty('semantic-id', 'microsoft-exchange')\n The loading logic &ldquo;carries over&rdquo; tooltips from the System Context Diagram to this diagram. Internet Banking System The &ldquo;Internet Banking System&rdquo; container maps to the same semantic element as on the System Context diagram because: The &ldquo;Internet Banking System&rdquo; element on the System Context Diagram links to this diagram page. The &ldquo;Internet Banking System&rdquo; element on this diagram has page-element property set to true. Semantic elements of the child elements of the &ldquo;Internet Banking System&rdquo; element are mapped to the elements reference and ordered with the flow comparator: container:\n  self: \n    elements:\n      path: 1\n      comparator: \n        flow: \n          fallback: label\n          condition: id != 'send-email'\n The condition prevents traversal of the &ldquo;API Application&rdquo; -&gt; &ldquo;E-mail System&rdquo; connection. It is not really necessary here - the order would not change without it. It is provided as an example because connection conditions may be necessary in some cases for proper ordering in diagrams with connection cycles. Containers All containers within the system except the &ldquo;API Application&rdquo; are mapped to Nodes, similar to the surroundings on the System Context diagram. API Application The &ldquo;API Application&rdquo; diagram element is mapped to CompositeNode because it has sub-elements. It is linked to the &ldquo;Container Diagram&rdquo; page. As such, its semantic element is mapped to the &ldquo;API Application Component Diagram&rdquo; page element as well allowing further mapping on that page. This diagram element defines base-uri property as %id%/. Because &ldquo;Placeholders&rdquo; is checked, %id%/ expands to api-application/ during loading. doc-ref is set to readme.md, which in combination with base-uri resolves to api-appliction/readme.md. Personal Banking Customer A customer of the bank, with personal bank accounts. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Database Stores user registration information, hashed authentication credentials, access logs, etc. Delivers to the customer's web browser Web Application Delivers the static content and the Internet banking single page application. Makes API calls to [JSON/HTTPS] Single-Page Application Provides all of the Internet banking functionality to customers via their web browser. Makes API calls to [JSON/HTTPS] Mobile App Provides a limited subset of the Internet banking functionality to customers via their mobile device. Reads from and writes to [SQL/TCP] API Application Provides Internet banking functionality via a JSP/HTTPS API. Internet Banking System Allows customers to view information about their bank accounts, and make payments. Sends e-mails to Sends e-mail using Makes API calls to [XML/HTTPS] Visits bigbank.com/ib using [HTTPS] Views account balances, and makes payments using Views account balances, and makes payments using Personal Banking Customer A customer of the bank, with personal bank accounts. Mainframe Banking System Stores all of the core banking information about customers, accounts, transactions, etc. E-mail System The internal Microsoft Exchange e-mail system. Database Stores user registration information, hashed authentication credentials, access logs, etc. Delivers to the customer's web browser Web Application Delivers the static content and the Internet banking single page application. Makes API calls to [JSON/HTTPS] Single-Page Application Provides all of the Internet banking functionality to customers via their web browser. Makes API calls to [JSON/HTTPS] Mobile App Provides a limited subset of the Internet banking functionality to customers via their mobile device. Reads from and writes to [SQL/TCP] API Application Provides Internet banking functionality via a JSP/HTTPS API. Internet Banking System Allows customers to view information about their bank accounts, and make payments. Sends e-mails to Sends e-mail using Makes API calls to [XML/HTTPS] Visits bigbank.com/ib using [HTTPS] Views account balances, and makes payments using Views account balances, and makes payments using"},"references/eClassifiers/Role/inheritance.html":{"path":"Role/Inheritance","action-uuid":"d88ede64-50c9-4072-9ff8-f3e3974ef132","title":"Inheritance","content":"Supertypes "},"references/eSubpackages/c4/references/eClassifiers/System/inheritance.html":{"path":"C4/System/Inheritance","action-uuid":"4e542ecf-9d33-447d-997d-73dbc1ca21b5","title":"Inheritance","content":"Supertypes "},"references/eClassifiers/ArchitectureDescriptionElement/index.html":{"action-uuid":"2d16131e-5a1d-4df7-bf46-50e467c73aff","title":"Architecture Description Element","content":"Base class for elements of architecture descriptions"}}